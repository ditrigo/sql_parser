Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> expression
Rule 1     expression -> IF CONDITION COMMA expression COMMA expression )
Rule 2     expression -> ELSE expression
Rule 3     expression -> CONDITION

Terminals, with rules where they appear

)                    : 1
COMMA                : 1 1
CONDITION            : 1 3
ELSE                 : 2
IF                   : 1
STRING               : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . IF CONDITION COMMA expression COMMA expression )
    (2) expression -> . ELSE expression
    (3) expression -> . CONDITION

    IF              shift and go to state 2
    ELSE            shift and go to state 4
    CONDITION       shift and go to state 3

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .



state 2

    (1) expression -> IF . CONDITION COMMA expression COMMA expression )

    CONDITION       shift and go to state 5


state 3

    (3) expression -> CONDITION .

    $end            reduce using rule 3 (expression -> CONDITION .)
    COMMA           reduce using rule 3 (expression -> CONDITION .)
    )               reduce using rule 3 (expression -> CONDITION .)


state 4

    (2) expression -> ELSE . expression
    (1) expression -> . IF CONDITION COMMA expression COMMA expression )
    (2) expression -> . ELSE expression
    (3) expression -> . CONDITION

    IF              shift and go to state 2
    ELSE            shift and go to state 4
    CONDITION       shift and go to state 3

    expression                     shift and go to state 6

state 5

    (1) expression -> IF CONDITION . COMMA expression COMMA expression )

    COMMA           shift and go to state 7


state 6

    (2) expression -> ELSE expression .

    $end            reduce using rule 2 (expression -> ELSE expression .)
    COMMA           reduce using rule 2 (expression -> ELSE expression .)
    )               reduce using rule 2 (expression -> ELSE expression .)


state 7

    (1) expression -> IF CONDITION COMMA . expression COMMA expression )
    (1) expression -> . IF CONDITION COMMA expression COMMA expression )
    (2) expression -> . ELSE expression
    (3) expression -> . CONDITION

    IF              shift and go to state 2
    ELSE            shift and go to state 4
    CONDITION       shift and go to state 3

    expression                     shift and go to state 8

state 8

    (1) expression -> IF CONDITION COMMA expression . COMMA expression )

    COMMA           shift and go to state 9


state 9

    (1) expression -> IF CONDITION COMMA expression COMMA . expression )
    (1) expression -> . IF CONDITION COMMA expression COMMA expression )
    (2) expression -> . ELSE expression
    (3) expression -> . CONDITION

    IF              shift and go to state 2
    ELSE            shift and go to state 4
    CONDITION       shift and go to state 3

    expression                     shift and go to state 10

state 10

    (1) expression -> IF CONDITION COMMA expression COMMA expression . )

    )               shift and go to state 11


state 11

    (1) expression -> IF CONDITION COMMA expression COMMA expression ) .

    $end            reduce using rule 1 (expression -> IF CONDITION COMMA expression COMMA expression ) .)
    COMMA           reduce using rule 1 (expression -> IF CONDITION COMMA expression COMMA expression ) .)
    )               reduce using rule 1 (expression -> IF CONDITION COMMA expression COMMA expression ) .)

